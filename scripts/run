#!/bin/bash

. $SNAP_DATA/tunnel/tunnel.conf

tinc_name() {
	hostname | sed 's/[^a-z0-9]//'
}

bold() { echo -ne "\e[1m${@}\e[0m"; }
dim() { echo -ne "\e[2m${@}\e[0m"; }
inverted() { echo -ne "\e[7m${@}\e[0m"; }
underline() { echo -ne "\e[4m${@}\e[0m"; }

if [ -f $SNAP_DATA/tunnel/interfaces_needed ]; then
	echo "+----------------------------------------------------------------------+"
	echo "| You need to connect a few interfaces to this snap. This snap needs   |"
	echo "| the permissions to add bridges and setup the tunnel.                 |"
	echo "|                                                                      |"
	echo "| # $(bold snap connect tunnel:network-control)                                |"
	echo "| # $(bold snap connect tunnel:network-setup-control)                          |"
	echo "| # $(bold snap connect tunnel:network-observe)                                |"
	echo "|                                                                      |"
	echo "| Then type \"$(bold snap refresh tunnel)\" to reload.                           |"
	echo "|                                                                      |"
	echo "| ... or just type: \"$(bold "tunnel.setup | sudo bash")\"                         |"
	echo "+----------------------------------------------------------------------+"
	exit 0
fi

usage() {
	echo "$(bold "tunnel [-hy] [-t type] [COMMAND ...]")"
	echo "  $(bold -h)          Show help for $(bold COMMAND)."
	echo "  $(bold -y)          Answer yes to all questions."
	echo "  $(bold -t) $(dim "type")     Select type/question. For scripts."
	echo
	echo "  $(bold config)          Print configuration options."
	echo "  $(bold name)            Print this systems name."
	echo "  $(bold top)             List connections and statistics."
	echo "  $(bold export)          Export this systems keys"
	echo "  $(bold add)             Add another systems exported keys."
	echo "  $(bold restart)         Restart tincd service."
	echo
	echo " Advanced:"
	echo "  $(bold import)          Manually import keys from another system."
	echo "  $(bold export-all)      Like above, but export all keys."
	echo "  $(bold exchange)        Export and import in one go."
	echo "  $(bold exchange-all)    Like above, but all with keys."
	echo "  $(bold tinc) $(dim "[cmd]")      Exec raw tinc commands."
	echo
	echo "Config and logs at: $SNAP_DATA"
	echo
	echo "If this is your first time using tunnel, I recommend that you run"
	echo "the config command $(bold tunnel config) and read $(bold tunnel about)."
	exit 0
}

config() {
	echo "Tunnel uses the snapd configuration options. Set options"
	echo "with \"$(bold "sudo snap set tunnel key=value")\"."
	echo
	echo "Choose the network bridge to use:"
	echo "  $(dim sudo snap set tunnel) $(bold "bridge=$BRIDGE")"
	echo "  Tunnel will create non-existent bridges."
	echo
	echo "Select package routing mode:"
	echo "  $(dim sudo snap set tunnel) $(bold "mode=$MODE")"
	echo "  The options are: router, switch and hub."
	echo
	echo "Change the port tinc uses:"
	echo "  $(dim sudo snap set tunnel) $(bold "port=$TINC_PORT")"
	echo
	echo "A colons separated list if node names to connect to:"
	echo "  $(dim sudo snap set tunnel) $(bold "connect=$CONNECTTO")"
	echo "  Not to be confused with the nodes IP/FQDN."
	echo
	echo "To restore a value to it's default value, set it to an empty"
	echo "string, like \"$(bold "sudo snap set tunnel key=")\""
	echo
	echo "See: https://www.tinc-vpn.org/documentation-1.1/Main-configuration-variables.html"
}

about() {
	echo "Tunnel is based on a collection of several softwares, but the main"
	echo "component is the software Tinc (https://www.tinc-vpn.org). Tinc"
	echo "has several advanced features that tunnel does not support. If you"
	echo "need them I recommend that you install and use Tinc."
	echo
	echo "There are no dedicated server or client. Any tunnel installation can"
	echo "connect to any other installation, assuming it's reachable. For a"
	echo "installation to be reachable you need to make sure that port $(bold $TINC_PORT) TCP/UDP"
	echo "is reachable. See $(bold tunnel config) for how to change these values."
}

help_add() {
	echo "This is an import followed by and automatic \"snap set tunnel connect\""

	exit 0
}

while getopts ":syht:" o; do
	case "${o}" in
		s)
			exec bash
			;;
		y)
			ALWAYS_YES=yes
			;;
		t)
			TYPE_SELECT=${OPTARG}
			;;
		h)
			SHOW_HELP_SECTION=yes
			;;
		*)
			usage
			;;
	esac
done
shift $((OPTIND-1))

case "$1" in
	config)
		config
		;;
	about)
		about
		;;
	tinc)
		if [ "x$SHOW_HELP_SECTION" == xyes ]; then
			tinc --help
			exit 0
		fi

		shift
		if [ $UID != 0 ]; then
			echo "You need to run this as root, try $(bold sudo tunnel $@)"
			exit 1
		fi
		tinc -c $SNAP_DATA/tinc/ --pidfile=$SNAP_DATA/tinc/pid $@
		;;
	add)
		[ "x$SHOW_HELP_SECTION" == xyes ] && help_add

		echo "Paste the output of \"tunnel export\" from the other node."
		echo "After the paste, press control-d to save this new node."
		cat > $SNAP_DATA/tmp/import-data
		cat $SNAP_DATA/tmp/import-data | $0 tinc import
		c="$(snapctl get connect)"
		if [ "x$c" == x ]; then
			c="$(awk '/Name/{ print $NF }' $SNAP_DATA/tmp/import-data)"
		else
			c="$c:$(awk '/Name/{ print $NF }' $SNAP_DATA/tmp/import-data)"
		fi
		snapctl set connect=$c
		rm $SNAP_DATA/tmp/import-data
		;;
	top|import|export|export-all|exchange|exchange-all)
		if [ "x$SHOW_HELP_SECTION" == xyes ]; then
			tinc --help | grep -E "^ *$1 "
			exit 0
		fi

		tinc -c $SNAP_DATA/tinc/ --pidfile=$SNAP_DATA/tinc/pid $1
		;;
	restart)
		if [ $UID != 0 ]; then
			echo "You need to run this as root, try $(bold sudo tunnel $@)"
			exit 1
		fi

		snapctl restart tunnel.tinc
		;;
	name)
		echo "This system is called $(bold $(tinc_name))"
		;;
	*)
		usage
		;;
esac
