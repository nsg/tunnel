#!/bin/bash

. $SNAP_DATA/tunnel/tunnel.conf

tinc_name() {
	hostname | sed 's/[^a-z0-9]//'
}

snap_tinc() {
	tinc -c $SNAP_DATA/tinc/ --pidfile=$SNAP_DATA/tinc/pid $@
}

root_check() {
	if [ $UID != 0 ]; then
		echo "You need to run this as root, try $(bold sudo tunnel $@)"
		exit 1
	fi
}

snap_snapctl() {
	# The configure hook is not triggered if I use snapctl from inside the snap.
	# From the outside a "snap set tunnel connect=foo" would run the hook.
	snapctl set $1="$2"
	$SNAP/meta/hooks/configure
}

bold() { echo -ne "\e[1m${@}\e[0m"; }
dim() { echo -ne "\e[2m${@}\e[0m"; }
inverted() { echo -ne "\e[7m${@}\e[0m"; }
underline() { echo -ne "\e[4m${@}\e[0m"; }

if [ -f $SNAP_DATA/tunnel/interfaces_needed ]; then
	echo "+----------------------------------------------------------------------+"
	echo "| You need to connect a few interfaces to this snap. This snap needs   |"
	echo "| the permissions to add bridges and setup the tunnel.                 |"
	echo "|                                                                      |"
	echo "| # $(bold snap connect tunnel:network-control)                                |"
	echo "| # $(bold snap connect tunnel:network-setup-control)                          |"
	echo "| # $(bold snap connect tunnel:network-observe)                                |"
	echo "|                                                                      |"
	echo "| Then type \"$(bold snap refresh tunnel)\" to reload.                           |"
	echo "|                                                                      |"
	echo "| ... or just type: \"$(bold "tunnel.setup | sudo bash")\"                         |"
	echo "+----------------------------------------------------------------------+"
	exit 0
fi

usage() {
	echo "$(bold "tunnel [-hy] [COMMAND ...]")"
	echo "  $(bold -h)          Show help for $(bold COMMAND)."
	echo "  $(bold -y)          Answer yes to all questions."
	echo
	echo "  $(bold config)          Print configuration options."
	echo "  $(bold name)            Print this systems name."
	echo "  $(bold export) $(dim "[name]")   Export this systems keys"
	echo "  $(bold add)             Add another systems exported keys."
	echo "  $(bold del) $(dim "[name]")      Remove another system."
	echo "  $(bold list)            List added hosts."
	echo "  $(bold restart)         Restart tincd service."
	echo "  $(bold status)          Show various status information."
	echo
	echo " Advanced:"
	echo "  $(bold tinc) $(dim "[cmd]")      Exec raw tinc commands."
	echo
	echo "Config and logs at: $SNAP_DATA"
	echo
	echo "If this is your first time using tunnel, I recommend that you run"
	echo "the config command $(bold tunnel config) and read $(bold tunnel about)."
	exit 0
}

config() {
	echo "Tunnel uses the snapd configuration options. Set options"
	echo "with \"$(bold "sudo snap set tunnel key=value")\"."
	echo
	echo "Choose the network bridge to use:"
	echo "  $(dim sudo snap set tunnel) $(bold "bridge=$BRIDGE")"
	echo "  Tunnel will create non-existent bridges."
	echo
	echo "Select package routing mode:"
	echo "  $(dim sudo snap set tunnel) $(bold "mode=$MODE")"
	echo "  The options are: router, switch and hub."
	echo
	echo "Change the port tinc uses:"
	echo "  $(dim sudo snap set tunnel) $(bold "port=$TINC_PORT")"
	echo
	echo "A colons separated list if node names to connect to:"
	echo "  $(dim sudo snap set tunnel) $(bold "connect=$CONNECTTO")"
	echo "  Not to be confused with the nodes IP/FQDN."
	echo
	echo "To restore a value to it's default value, set it to an empty"
	echo "string, like \"$(bold "sudo snap set tunnel key=")\""
	echo
	echo "See: https://www.tinc-vpn.org/documentation-1.1/Main-configuration-variables.html"
}

about() {
	echo -e \
		"The main component of tunnel is the software" \
		"Tinc (https://www.tinc-vpn.org)." \
		"Tinc has several advanced features that tunnel is not intended to support." \
		"If you need them I recommend that you install and use Tinc directly. Tinc" \
		"is available in most software repositories.\n" | fold -s
	echo -e \
		"There are no dedicated server or client. Any tunnel installation can" \
		"connect to any other installation, assuming it's reachable. For this" \
		"installation to be reachable you need to make sure that port" \
		"$(bold $TINC_PORT) TCP/UDP" \
		"is reachable by the other installations. See $(bold tunnel config) for how" \
		"to change these values." | fold -s
}

help_add() {
	echo "This is an import followed by and automatic \"snap set tunnel connect\""

	exit 0
}

help_del() {
	echo "Remove an added/imported system. You can find the list of systems by running"
	echo "the command $(bold tunnel list)."

	exit 0
}

help_list() {
	echo "List added hosts, type $(bold tunnel dump) $(dim name) to display the file."

	exit 0
}

help_export() {
	echo "Export host configuration of local node to standard output, or export"
	echo "the specified hosts configuration file."

	exit 0
}

while getopts ":syh" o; do
	case "${o}" in
		s)
			exec bash
			;;
		y)
			ALWAYS_YES=yes
			;;
		h)
			SHOW_HELP_SECTION=yes
			;;
		*)
			usage
			;;
	esac
done
shift $((OPTIND-1))

case "$1" in
	config)
		config
		;;
	about)
		about
		;;
	tinc)
		if [ "x$SHOW_HELP_SECTION" == xyes ]; then
			tinc --help
			exit 0
		fi

		shift
		root_check $@
		snap_tinc $@
		;;
	add)
		[ "x$SHOW_HELP_SECTION" == xyes ] && help_add
		echo "Paste the output of \"tunnel tinc export\" from the other node." \
			"After the paste, press control-d (^D) to save this new node." \
			"To cancel press control-c (^C) now." | fold -s
		echo "$(underline PASTE NOW:)"
		cat > $SNAP_DATA/tmp/import-data
		cat $SNAP_DATA/tmp/import-data | $0 tinc import
		new_c="$(awk '/Name/{ print $NF }' $SNAP_DATA/tmp/import-data)"
		old_c="$(snapctl get connect)"
		rm $SNAP_DATA/tmp/import-data

		if [ "x$old_c" != x ]; then
			c="$old_c:$new_c"
		fi

		snap_snapctl connect "$c"
		echo "Connect is updated to $(bold $c), see $(bold tunnel config)." | fold -s
	
		echo "Please give me the IP or DNS name to $(bold $new_c)"
		echo -n "[?] > "; read c_ip

		echo "What port? 655 is default."
		echo -n "[655] > "; read c_port
		if [ -z $c_port ]; then
			c_port=655
		fi

		echo "What is to be considered as the local subnet. For example" \
			"192.168.0.0/24 or 192.168.0.20/31 and so on?" | fold -s
		echo -n "[?] > "; read c_subnet

		echo "Address = $c_ip" >> $SNAP_DATA/tinc/hosts/$new_c
		echo "Port = $c_port" >> $SNAP_DATA/tinc/hosts/$new_c
		echo "Subnet = $c_subnet" >> $SNAP_DATA/tinc/hosts/$new_c

		echo "If you like to edit the configuration later, edit" \
			"$SNAP_DATA/tinc/hosts/$new_c" | fold -s
		;;
	del)
		[ "x$SHOW_HELP_SECTION" == xyes ] && help_del
		root_check $@

		rm $SNAP_DATA/tinc/hosts/$2
		;;
	list)
		[ "x$SHOW_HELP_SECTION" == xyes ] && help_list

		for host in $(ls -1 $SNAP_DATA/tinc/hosts/); do
			snap_tinc info $host | sed "s/$(tinc_name)/$(bold $(tinc_name))/"
			echo
		done
		;;
	status)
		echo "$(bold BRIDGE_______________________________)"
		brctl show $BRIDGE
		echo
		echo "$(bold CONNECTIONS__________________________)"
		snap_tinc dump connections
		echo
		echo "$(bold NODES________________________________)"
		snap_tinc dump nodes
		echo
		;;
	export)
		root_check $@

		[ "x$SHOW_HELP_SECTION" == xyes ] && help_export

		if [ -z $2 ]; then
			snap_tinc export
		elif [ -f "$SNAP_DATA/tinc/hosts/$2" ]; then
			cat "$SNAP_DATA/tinc/hosts/$2"
		else
			echo "host $2 not found"
		fi
		;;
	restart)
		root_check $@
		snapctl restart tunnel.tinc
		;;
	name)
		echo "This system is called $(bold $(tinc_name)), this is normalized" \
			"version of your hostname $(bold $(hostname))." | fold -s
		;;
	*)
		usage
		;;
esac
